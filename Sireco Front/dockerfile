# # We don't want to start from scratch.
# # That is why we tell node here to use the current node image as base.
# FROM node:alpine3.11

# # Create an application directory
# RUN mkdir -p /app

# # The /app directory should act as the main application directory
# WORKDIR /app

# # Copy the app package and package-lock.json file
# COPY frontend/package*.json ./

# # Install node packages
# RUN npm install

# # Copy or project directory (locally) in the current directory of our docker image (/app)
# COPY frontend/ .

# # Build the app
# RUN npm run build

# # Expose $PORT on container.
# # We use a varibale here as the port is something that can differ on the environment.
# EXPOSE $PORT

# # Set host to localhost / the docker image
# ENV NUXT_HOST=0.0.0.0

# # Set app port
# ENV NUXT_PORT=$PORT

# # Set the base url
# ENV PROXY_API=$PROXY_API

# # Set the browser base url
# ENV PROXY_LOGIN=$PROXY_LOGIN

# # Start the app
# CMD [ "npm", "start" ]


























#------------------------------------------------------------------------


# # Use an official Nginx runtime as a parent image
# FROM nginx:stable
# # Copy the HTML, CSS, and JavaScript files into the container
# COPY index.html /usr/share/nginx/html/
# COPY js/ /usr/share/nginx/html/js/
# COPY css/ /usr/share/nginx/html/css/
# # Expose port 80 for the Nginx server
# EXPOSE 80
# # Start Nginx when the container starts
# CMD ["nginx", "-g", "daemon off;"]


FROM nginx:stable

# Copiar la configuración personalizada de Nginx
COPY sireco.conf /etc/nginx/conf.d/sireco.conf

# Copiar los archivos HTML, CSS y JS al directorio de Nginx
COPY index.html /usr/share/nginx/html/
COPY js/ /usr/share/nginx/html/js/
COPY css/ /usr/share/nginx/html/css/

# Exponer el puerto 80 para acceder al sitio
EXPOSE 80

# Comando para mantener Nginx ejecutándose en primer plano
CMD ["nginx", "-g", "daemon off;"]
